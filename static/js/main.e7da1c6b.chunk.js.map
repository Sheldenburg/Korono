{"version":3,"sources":["data/data.ts","QuestionView.tsx","TaskView.tsx","Tasks.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","useStyles","makeStyles","title","marginTop","QuestionView","question","classes","Typography","variant","className","results","map","result","context","TaskView","task","useState","questionIndex","setQuestionIndex","Select","value","onChange","e","target","questions","index","MenuItem","undefined","Tasks","taskIndex","setTaskIndex","theme","logo","marginRight","appBarSpacer","mixins","toolbar","content","flexGrow","height","overflow","container","paddingTop","spacing","paddingBottom","paper","padding","display","flexDirection","App","AppBar","Toolbar","role","aria-label","Container","Paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"smgWAsBeA,E,MADUA,KCfnBC,EAAYC,IAAW,CAC3BC,MAAO,CACLC,UAAW,MAoBAC,EAhBwC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClDC,EAAUN,IAEhB,OACE,oCACE,kBAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQJ,OAA5C,UACMG,EAASA,SADf,MAICA,EAASK,QAAQC,KAAI,SAAAC,GAAM,OAC1B,2BAAIA,EAAOC,cCbbb,EAAYC,IAAW,CAC3BC,MAAO,CACLC,UAAW,MA6BAW,EAzB4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtCT,EAAUN,IADuC,EAEbgB,qBAFa,mBAEhDC,EAFgD,KAEjCC,EAFiC,KAIvD,OACE,oCACE,kBAACX,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQJ,OAA5C,qBAGA,kBAACiB,EAAA,EAAD,CACEC,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAAiBI,EAAEC,OAAOH,SAExCL,EAAKS,UAAUb,KAAI,SAACN,EAAUoB,GAAX,OAClB,kBAACC,EAAA,EAAD,CAAUN,MAAOK,GAAQpB,EAASA,mBAInBsB,IAAlBV,GACC,kBAAC,EAAD,CAAcZ,SAAUU,EAAKS,UAAUP,OCNhCW,EApBa,WAAO,IAAD,EACEZ,qBADF,mBACzBa,EADyB,KACdC,EADc,KAGhC,OACE,oCACE,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBACA,kBAACW,EAAA,EAAD,CACEC,MAAOS,EACPR,SAAU,SAAAC,GAAC,OAAIQ,EAAaR,EAAEC,OAAOH,SAEpCrB,EAAKY,KAAI,SAACI,EAAMU,GAAP,OACR,kBAACC,EAAA,EAAD,CAAUN,MAAOK,GAAQV,EAAKA,eAInBY,IAAdE,GAA2B,kBAAC,EAAD,CAAUd,KAAMhB,EAAK8B,OCbjD7B,EAAYC,KAAW,SAAA8B,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAa,IAGfC,aAAcH,EAAMI,OAAOC,QAC3BC,QAAS,CACPC,SAAU,EACVC,OAAQ,QACRC,SAAU,QAEZC,UAAW,CACTC,WAAYX,EAAMY,QAAQ,GAC1BC,cAAeb,EAAMY,QAAQ,IAE/BE,MAAO,CACLC,QAASf,EAAMY,QAAQ,GACvBI,QAAS,OACTP,SAAU,OACVQ,cAAe,cA6BJC,EAzBW,WACxB,IAAM3C,EAAUN,IAChB,OACE,oCACE,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC5C,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQ0B,MAC1C,0BAAMoB,KAAK,MAAMC,aAAW,OAA5B,iBAIF,kBAAC9C,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAGJ,0BAAMC,UAAWH,EAAQ+B,SACvB,yBAAK5B,UAAWH,EAAQ4B,eACxB,kBAACoB,EAAA,EAAD,CAAW7C,UAAWH,EAAQmC,WAC5B,kBAACc,EAAA,EAAD,CAAO9C,UAAWH,EAAQuC,OACxB,kBAAC,EAAD,WCvCQW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7da1c6b.chunk.js","sourcesContent":["import raw from \"./data.json\"\n\nexport interface Result {\n  context: string\n  answer: string\n  start_index: number\n  end_index: number\n}\n\nexport interface Question {\n  question: string\n  summary_answer?: string\n  summary_context?: string\n  results: Result[]\n}\n\nexport interface Task {\n  task: string\n  questions: Question[]\n}\n\nconst data: Task[] = raw.data\nexport default data\n","import React from \"react\"\nimport Typography from \"@material-ui/core/Typography\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\n\nimport { Question } from \"./data/data\"\n\nconst useStyles = makeStyles({\n  title: {\n    marginTop: 40\n  }\n})\n\nconst QuestionView: React.FC<{ question: Question }> = ({ question }) => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <Typography variant=\"h5\" className={classes.title}>\n        {`${question.question}?`}\n      </Typography>\n\n      {question.results.map(result => (\n        <p>{result.context}</p>\n      ))}\n    </>\n  )\n}\n\nexport default QuestionView\n","import React, { useState } from \"react\"\nimport Select from \"@material-ui/core/Select\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Typography from \"@material-ui/core/Typography\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\n\nimport { Task } from \"./data/data\"\nimport QuestionView from \"./QuestionView\"\n\nconst useStyles = makeStyles({\n  title: {\n    marginTop: 40\n  }\n})\n\nconst TaskView: React.FC<{ task: Task }> = ({ task }) => {\n  const classes = useStyles()\n  const [questionIndex, setQuestionIndex] = useState<number | undefined>()\n\n  return (\n    <>\n      <Typography variant=\"h6\" className={classes.title}>\n        Select a question\n      </Typography>\n      <Select\n        value={questionIndex}\n        onChange={e => setQuestionIndex(e.target.value as number)}\n      >\n        {task.questions.map((question, index) => (\n          <MenuItem value={index}>{question.question}</MenuItem>\n        ))}\n      </Select>\n\n      {questionIndex !== undefined && (\n        <QuestionView question={task.questions[questionIndex]} />\n      )}\n    </>\n  )\n}\n\nexport default TaskView\n","import React, { useState } from \"react\"\nimport Select from \"@material-ui/core/Select\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Typography from \"@material-ui/core/Typography\"\n\nimport data from \"./data/data\"\nimport TaskView from \"./TaskView\"\n\nconst Tasks: React.FC<{}> = () => {\n  const [taskIndex, setTaskIndex] = useState<number | undefined>()\n\n  return (\n    <>\n      <Typography variant=\"h6\">Select a task</Typography>\n      <Select\n        value={taskIndex}\n        onChange={e => setTaskIndex(e.target.value as number)}\n      >\n        {data.map((task, index) => (\n          <MenuItem value={index}>{task.task}</MenuItem>\n        ))}\n      </Select>\n\n      {taskIndex !== undefined && <TaskView task={data[taskIndex]} />}\n    </>\n  )\n}\n\nexport default Tasks\n","import React from \"react\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Container from \"@material-ui/core/Container\"\nimport Paper from \"@material-ui/core/Paper\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\n\nimport Tasks from \"./Tasks\"\n\nconst useStyles = makeStyles(theme => ({\n  logo: {\n    marginRight: 20\n  },\n\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\"\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\"\n  }\n}))\n\nconst App: React.FC<{}> = () => {\n  const classes = useStyles()\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <Typography variant=\"h3\" className={classes.logo}>\n            <span role=\"img\" aria-label=\"img\">\n              ðŸ‘‘\n            </span>\n          </Typography>\n          <Typography variant=\"h5\">Korono</Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container className={classes.container}>\n          <Paper className={classes.paper}>\n            <Tasks />\n          </Paper>\n        </Container>\n      </main>\n    </>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\n\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}